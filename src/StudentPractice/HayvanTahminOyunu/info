StringBuilder
    Java'da metin datasi tutabilecegimiz bir yapi
    -mutable
    -daha hizli
    -capacitiy ozelligi var
    -multi thread desteklemez

    StringBuilder sb = new StringBuilder();
    StringBuilder sb = new StringBuilder("Java Candir");
    StringBuilder sb = new StringBuilder(11);

    sb.append(); ==> add gibi bir islevi var, ekleme yapar
    sb.reverse(); ==> tersten yazdirmayi saglar
    sb.capacity(); ==> capacity'imizi belirler
    sb.trim(); ==> kırpma yapar
    sb.length(); ==> uzunlugu
    sb.delete(); ==> istenilen indexi siler
    sb.compareTo(); ==> iki sb karsilastirmasi icin
    sb.replace(); ==> yer degistirme

Access Modifier
    Bir class uyesinin scope'unu belirler
        - private ==> sadece bulundugu class'i kapsar
        - default ==> bulundugu class + package
        - protected ==> bulundugu class + package + başka package'lardaki child class'lar
        - public ==> global

    class, method ve variable'in basina yazilan keyword

    okuma yazma(erisim yetkisi) yetkisi = Encapsulation
    Getter/Setter

Inheritance
    Kalitim/Miras
    Child - Parent iliskisi

    child class'a extend keyword'ü ile Parent'ini secmis oluruz

    Bir parent class'in birden fazla child'i olabiliriz
    Bir child class'in birden fazla parent'i olamaz

    child-parent-grand parent iliskisi ile MultiLevel Inheritance yapabiliriz

    private ve/veya static class uyeleri inherit edilemez

    this(); ==> o classtaki parametresiz cons. call
    super(); ==> parent class'daki parametresiz cons. call

    Eger class level variable ile methoddaki variable ismi ayni ise karismamasi icin
    this. ==> o class' daki
    super. ==> parent class' daki

Polymorphism

    Objelerin cok bicimliligi

    OVERRIDE
        -farkli class
        -ayni method ismi
        -ayni signature

        -dinamik bir yapi
        -parent'daki method override edilen
        -child'daki method override eden

        * Child parent'i acces modifier olarak kisitlayamaz
        * Return type primitive veya void ise iki method'un return type'i ayni olmalidir

        *non primitive return type ise parent return type parent olmali
    OVERLOADING
        -ayni class
        -ayni method ismi
        -farkli signature

Abstract Classes
    (Soyut)
    Kullanilmasi zorunlu methodlari belirliyor

    Abstract class'lar nasil olmasi gerektigine degil, ne olmasi gerektigi konusunda
    standart belirlemek icindir

    Abstract bir Class’ı parent edinen; Concreate class’lar,
    abstract Class’da abstract olarak tanımlanmış tüm metotları override etmek zorundadır.

    final ve private method'lar override edilemez